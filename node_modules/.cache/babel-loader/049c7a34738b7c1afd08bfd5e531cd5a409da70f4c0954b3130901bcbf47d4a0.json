{"ast":null,"code":"// serviceWorkerRegistration.js\n\n// This is the code to register the service worker\n// Make sure this is placed in the 'src' folder of your project\nconst isLocalhost = Boolean(window.location.hostname === \"localhost\" || window.location.hostname === \"[::1]\" || window.location.hostname === \"127.0.0.1\");\nexport function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl);\n      } else {\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    console.log(\"Service Worker registered: \", registration);\n  }).catch(error => {\n    console.error(\"Service Worker registration failed: \", error);\n  });\n}\nfunction checkValidServiceWorker(swUrl) {\n  fetch(swUrl).then(response => {\n    if (response.status === 404 || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    } else {\n      registerValidSW(swUrl);\n    }\n  }).catch(() => {\n    console.log(\"No internet connection found. App is running in offline mode.\");\n  });\n}\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","register","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","registerValidSW","serviceWorker","then","registration","console","log","catch","error","fetch","response","status","headers","get","indexOf","ready","unregister","message"],"sources":["C:/Users/bball/streamlist/src/serviceWorkerRegistration.js"],"sourcesContent":["// serviceWorkerRegistration.js\r\n\r\n// This is the code to register the service worker\r\n// Make sure this is placed in the 'src' folder of your project\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    window.location.hostname === \"[::1]\" ||\r\n    window.location.hostname === \"127.0.0.1\"\r\n);\r\n\r\nexport function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      console.log(\"Service Worker registered: \", registration);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Service Worker registration failed: \", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      if (response.status === 404 || response.headers.get(\"content-type\").indexOf(\"javascript\") === -1) {\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister();\r\n        });\r\n      } else {\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA,MAAMA,WAAW,GAAGC,OAAO,CACzBC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IACtCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,OAAO,IACpCF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WACjC,CAAC;AAED,OAAO,SAASC,QAAQA,CAAA,EAAG;EACzB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAI,eAAe,IAAIC,SAAS,EAAE;IACzE,MAAMC,SAAS,GAAG,IAAIC,GAAG,CAACL,OAAO,CAACC,GAAG,CAACK,UAAU,EAAEV,MAAM,CAACC,QAAQ,CAACU,IAAI,CAAC;IACvE,IAAIH,SAAS,CAACI,MAAM,KAAKZ,MAAM,CAACC,QAAQ,CAACW,MAAM,EAAE;MAC/C;IACF;IAEAZ,MAAM,CAACa,gBAAgB,CAAC,MAAM,EAAE,MAAM;MACpC,MAAMC,KAAK,GAAG,GAAGV,OAAO,CAACC,GAAG,CAACK,UAAU,oBAAoB;MAE3D,IAAIZ,WAAW,EAAE;QACfiB,uBAAuB,CAACD,KAAK,CAAC;MAChC,CAAC,MAAM;QACLE,eAAe,CAACF,KAAK,CAAC;MACxB;IACF,CAAC,CAAC;EACJ;AACF;AAEA,SAASE,eAAeA,CAACF,KAAK,EAAE;EAC9BP,SAAS,CAACU,aAAa,CACpBd,QAAQ,CAACW,KAAK,CAAC,CACfI,IAAI,CAAEC,YAAY,IAAK;IACtBC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEF,YAAY,CAAC;EAC1D,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK;IAChBH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;EAC9D,CAAC,CAAC;AACN;AAEA,SAASR,uBAAuBA,CAACD,KAAK,EAAE;EACtCU,KAAK,CAACV,KAAK,CAAC,CACTI,IAAI,CAAEO,QAAQ,IAAK;IAClB,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAID,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAACC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE;MAChGtB,SAAS,CAACU,aAAa,CAACa,KAAK,CAACZ,IAAI,CAAEC,YAAY,IAAK;QACnDA,YAAY,CAACY,UAAU,CAAC,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC,MAAM;MACLf,eAAe,CAACF,KAAK,CAAC;IACxB;EACF,CAAC,CAAC,CACDQ,KAAK,CAAC,MAAM;IACXF,OAAO,CAACC,GAAG,CAAC,+DAA+D,CAAC;EAC9E,CAAC,CAAC;AACN;AAEA,OAAO,SAASU,UAAUA,CAAA,EAAG;EAC3B,IAAI,eAAe,IAAIxB,SAAS,EAAE;IAChCA,SAAS,CAACU,aAAa,CAACa,KAAK,CAC1BZ,IAAI,CAAEC,YAAY,IAAK;MACtBA,YAAY,CAACY,UAAU,CAAC,CAAC;IAC3B,CAAC,CAAC,CACDT,KAAK,CAAEC,KAAK,IAAK;MAChBH,OAAO,CAACG,KAAK,CAACA,KAAK,CAACS,OAAO,CAAC;IAC9B,CAAC,CAAC;EACN;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}